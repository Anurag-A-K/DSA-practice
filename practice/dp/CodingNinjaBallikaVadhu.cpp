// Balika Vadhu- Problem
// Send Feedback
// Anandi and Jagya were getting married again when they have achieved proper age. 
// Dadi Sa invited Alok Nath to do the kanyadaan and give blessings. Alok Nath has 2 blessings. 
// Each bessing is in the form of a string consisting of lowercase charaters(a-z) only. 
// But he can give only one blessing of K length because some priest told him to do so. 
// Thus he decides to generate a blessing using the other two blessings. 
// While doing this he wants to ensure that happiness brought into their life by his blessing is maximum.

// The generated blessing is a common subsequence of length K of the two blessings he has. 
// Happiness of the blessing he generates is calculated by the sum of ASCII values of characters 
// in the blessing and he wants the happiness to be maximum. If he is not able to generate a common subsequence 
// of length K then the happiness is 0 (zero). Alok Nath comes to you and asks you to find the maximum happiness 
// that can be generated by the two blessings he has.

// Input Specification
// First line consists of number of test cases t. 
// Each test case consists of two strings b1 (blessing 1),b2 (blessing 2) and an integer K, each of them in separate lines.
// Output Specification
// Output consists of t lines each containing an integer denoting the maximum happiness value that can be generated by the two blessings.
// Constraint
// 1 <= t <= 50

// 1 <= length(b1) , length(b2) <= 100 

// 1 <= K <= 100
// Sample Input
// 2
// asdf
// asdf
// 3
// anandi
// jagya
// 3
// Sample Output
// 317
// 0


#include <iostream>
#include<strings.h>
#include<vector>
#include <bits/stdc++.h>
using namespace std;

int main() {
  // std::cout << "Hello World!\n";
  int k = 3;
  string A = "asdf";
  string B = "asdf";

  int mat[A.length()+1][B.length()+1];

  for (int i=0;i<A.length()+1;i++) {
    for (int j=0;j<B.length();j++) {
      mat[i][j]=0;
    }
  }

  for (int i=1;i<A.length()+1;i++) {
    for (int j=1;j<B.length()+1;j++) {
      if (A[i-1]==B[j-1]) {
        mat[i][j]=mat[i-1][j-1]+1;
      }else {
        mat[i][j]=max(mat[i-1][j],mat[i][j-1]);
      }
    }
  }

  vector<char> v;
  // v.push_back("d");

  int i = A.length(), j = B.length(); 
   while (i > -1 && j > -1) 
   { 
      if (A[i-1] == B[j-1]) 
      { 
          v.push_back(A[i]);
          i--;
          j--;
      } 
      else if (mat[i-1][j] > mat[i][j-1]) 
         i--; 
      else
         j--; 
   } 

  sort(v.begin(), v.end(),greater<char>()); 
  int count=0;

  for (int i=0;i<k;i++) {
    // cout<<v[i]<<" ";
    count+=(int)v[i];
  }

  cout<<count;



  // cout<<mat[A.length()][B.length()];


}